name: Deploy to Azure

on:
  push:
    branches:
      - main  # Ou a branch que você está utilizando, como deploy-to-azure-app-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Checkout do código
      - name: Checkout Source
        uses: actions/checkout@v3

      # Passo 2: Navegar para o diretório backend
      - name: Move to backend directory
        run: cd backend  # Mude para o diretório do backend

      # Passo 3: Configurar o Java (caso seu projeto seja Java)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Escolha a distribuição do Java (Temurin é um exemplo)
          java-version: '11'  # Defina a versão do Java que você está usando, por exemplo, 11 ou 17

      # Passo 4: Build do projeto
      - name: Build Project
        run: mvn clean install -DskipTests  # Para um projeto Maven, ajuste se necessário

      # Passo 5: Upload do artefato gerado (JAR ou WAR) para uso no deploy
      - name: Upload Artifact for Deployment Job
        uses: actions/upload-artifact@v2
        with:
          name: springboot-artifact  # Nome do artefato
          path: ${{ github.workspace }}/backend/target/*.jar  # Caminho do arquivo gerado após o build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Isso garante que o deploy só ocorra após o build ser concluído
    steps:
      # Passo 1: Baixar o artefato gerado
      - name: Download Artifact from Build Job
        uses: actions/download-artifact@v2
        with:
          name: springboot-artifact  # Nome do artefato que você subiu no job anterior

      # Passo 2: Fazer o deploy na Azure Web App
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'NovoAppWebApp'  # Nome do aplicativo no Azure
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}  # Perfil de publicação armazenado como segredo
          package: '*.jar'  # Arquivo JAR gerado que será implantado no Azure
